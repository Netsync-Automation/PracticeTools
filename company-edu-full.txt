            {activeTab === 'company-edu' && !isNonAdminPracticeUser && (
              <div className="space-y-8">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">Company Education Settings</h2>
                    <p className="text-sm text-gray-600 mt-1">Configure educational tools and integrations</p>
                  </div>
                </div>

                {/* Webex Meetings Integration Section */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900">Webex Meetings Integration</h3>
                      <p className="text-sm text-gray-600">Configure Webex Meetings sites and recording hosts</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={webexMeetingsEnabled}
                        onChange={async (e) => {
                          const newEnabled = e.target.checked;
                          setWebexMeetingsEnabled(newEnabled);
                          
                          // Auto-save toggle change
                          console.log('🔧 [TOGGLE-SAVE] Webex Meetings toggle changed to:', newEnabled);
                          setSavingWebexMeetings(true);
                          try {
                            const response = await fetch('/api/settings/webex-meetings', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({
                                enabled: newEnabled,
                                sites: webexMeetingsSites
                              })
                            });
                            
                            if (response.ok) {
                              console.log('✅ [TOGGLE-SAVE] Toggle auto-saved successfully');
                            } else {
                              const errorData = await response.json();
                              alert('Failed to save toggle: ' + (errorData.error || 'Unknown error'));
                            }
                          } catch (error) {
                            console.error('🔧 [TOGGLE-SAVE] Error auto-saving toggle:', error);
                            alert('Error saving toggle');
                          } finally {
                            setSavingWebexMeetings(false);
                          }
                        }}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      <span className="ml-3 text-sm font-medium text-gray-700">
                        {webexMeetingsEnabled ? 'Enabled' : 'Disabled'}
                      </span>
                    </label>
                  </div>

                  {webexMeetingsEnabled && (
                    <div className="space-y-6">
                      {/* Site URLs List */}
                      <div>
                        <div className="flex items-center justify-between mb-4">
                          <h4 className="text-md font-semibold text-gray-900">Configured Sites</h4>
                          <button
                            onClick={() => {
                              setEditingSiteIndex(null);
                              setNewSite({
                                siteUrl: '',
                                accessToken: '',
                                refreshToken: '',
                                clientId: '',
                                clientSecret: '',
                                recordingHosts: ['']
                              });
                              setShowAddSite(true);
                            }}
                            className="btn-primary flex items-center gap-2 text-sm"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Add Site URL
                          </button>
                        </div>

                        {webexMeetingsSites.length === 0 ? (
                          <div className="text-center py-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                            <svg className="w-8 h-8 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                            <h4 className="text-sm font-medium text-gray-900 mb-1">No sites configured</h4>
                            <p className="text-sm text-gray-600">Add your first Webex Meetings site to get started</p>
                          </div>
                        ) : (
                          <div className="space-y-4">
                            {webexMeetingsSites.map((site, index) => (
                              <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <h5 className="font-medium text-gray-900 mb-2">{site.siteUrl}</h5>
                                    <div className="space-y-2">
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs font-medium text-gray-600">Access Token:</span>
                                        <span className="text-xs text-gray-500 font-mono">••••••••</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs font-medium text-gray-600">Refresh Token:</span>
                                        <span className="text-xs text-gray-500 font-mono">••••••••</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs font-medium text-gray-600">Client ID:</span>
                                        <span className="text-xs text-gray-500 font-mono">••••••••</span>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <span className="text-xs font-medium text-gray-600">Client Secret:</span>
                                        <span className="text-xs text-gray-500 font-mono">••••••••</span>
                                      </div>
                                      <div>
                                        <span className="text-xs font-medium text-gray-600">Recording Hosts:</span>
                                        <div className="flex flex-wrap gap-1 mt-1">
                                          {site.recordingHosts.map((host, hostIndex) => {
                                            const hostEmail = typeof host === 'string' ? host : host?.email || '[object Object]';
                                            return (
                                              <span key={hostIndex} className="inline-flex px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded">
                                                {hostEmail}
                                              </span>
                                            );
                                          })}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex gap-2">
                                    <button
                                      onClick={() => {
                                        setEditingSiteIndex(index);
                                        setNewSite({
                                          siteUrl: site.siteUrl,
                                          accessToken: '',
                                          refreshToken: '',
                                          clientId: '',
                                          clientSecret: '',
                                          recordingHosts: site.recordingHosts.map(host => typeof host === 'string' ? host : host.email || '')
                                        });
                                        setShowAddSite(true);
                                      }}
                                      className="text-blue-600 hover:text-blue-800 hover:bg-blue-50 p-2 rounded"
                                      title="Edit Site"
                                    >
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                      </svg>
                                    </button>
                                    <button
                                      onClick={() => {
                                        const updatedSites = webexMeetingsSites.filter((_, i) => i !== index);
                                        setWebexMeetingsSites(updatedSites);
                                      }}
                                      className="text-red-600 hover:text-red-800 hover:bg-red-50 p-2 rounded"
                                      title="Remove Site"
                                    >
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                      </svg>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>

                      {/* Management Buttons */}
                      <div className="pt-4 border-t border-gray-200 flex gap-3">
                        {webexMeetingsEnabled && webexMeetingsSites.length > 0 && (
                          <>
                            <button
                            onClick={() => {
                              console.log('🔧 [FRONTEND-WEBHOOK] Manage Webhooks button clicked');
                              console.log('🔧 [FRONTEND-WEBHOOK] Current state:', {
                                webexMeetingsEnabled,
                                sitesCount: webexMeetingsSites.length,
                                sites: webexMeetingsSites.map(s => ({ siteUrl: s.siteUrl, hasAccessToken: !!s.accessToken }))
                              });
                              setShowWebhookModal(true);
                            }}
                            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 flex items-center gap-2"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            Manage Webhooks
                          </button>
                          
                          <button
                            onClick={() => {
                              setShowApiManagementModal(true);
                            }}
                            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            Manage API
                          </button>
                          

                          </>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}




          </div>
        </div>
        
        {/* API Management Modal */}
        {showApiManagementModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-md w-full">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    API Management
                  </h3>
                  <button
                    onClick={() => setShowApiManagementModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <p className="text-sm text-gray-600 mb-6">
                  Manage and validate Webex Meetings API access and view detailed logs.
                </p>
                
                <div className="space-y-4">
                  <button
                    onClick={async () => {
                      setValidatingApi(true);
                      try {
                        const response = await fetch('/api/webexmeetings/settings/apivalidation', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' }
                        });
                        
                        const data = await response.json();
                        setApiResults(data.results || []);
                        setShowApiManagementModal(false);
                        setShowApiModal(true);
                      } catch (error) {
                        alert('❌ Error validating API access');
                      } finally {
                        setValidatingApi(false);
                      }
                    }}
                    disabled={validatingApi}
                    className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"
                  >
                    {validatingApi ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Validating APIs...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Validate APIs
                      </>
                    )}
                  </button>
                  
                  <button
                    onClick={async () => {
                      setLoadingApiLogs(true);
                      try {
                        const response = await fetch('/api/webexmeetings/settings/apilogs');
                        const data = await response.json();
                        setApiLogs(data.logs || []);
                        setShowApiManagementModal(false);
                        setShowApiLogsModal(true);
                      } catch (error) {
                        alert('❌ Error loading API logs');
                      } finally {
                        setLoadingApiLogs(false);
                      }
                    }}
                    disabled={loadingApiLogs}
                    className="w-full px-4 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"
                  >
                    {loadingApiLogs ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Loading Logs...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        View Logs
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* API Validation Modal */}
        {showApiModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    WebEx API Validation Results
                  </h3>
                  <button
                    onClick={() => setShowApiModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <div className="space-y-6">
                  {apiResults.map((result, index) => (
                    <div key={index} className={`border rounded-lg p-4 ${
                      result.status === 'error' ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'
                    }`}>
                      <div className="flex items-center justify-between mb-4">
                        <h4 className="font-semibold text-lg">{result.site}</h4>
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                          result.status === 'error' 
                            ? 'bg-red-100 text-red-800' 
                            : 'bg-green-100 text-green-800'
                        }`}>
                          {result.status === 'error' ? '❌ Failed' : '✅ Passed'}
                        </span>
                      </div>
                      
                      {result.error && (
                        <div className="mb-4 p-3 bg-red-100 border border-red-200 rounded text-red-800 text-sm">
                          <strong>Error:</strong> {result.error}
                        </div>
                      )}
                      
                      {result.scopes && (
                        <div className="mb-4">
                          <h5 className="font-medium mb-2">Required Scopes:</h5>
                          <div className="flex flex-wrap gap-2 mb-2">
                            {result.scopes.required.map(scope => (
                              <span key={scope} className={`px-2 py-1 text-xs rounded ${
                                result.scopes.missing.includes(scope)
                                  ? 'bg-red-100 text-red-800'
                                  : 'bg-green-100 text-green-800'
                              }`}>
                                {scope} {result.scopes.missing.includes(scope) ? '❌' : '✅'}
                              </span>
                            ))}
                          </div>
                          {result.scopes.missing.length > 0 && (
                            <p className="text-red-600 text-sm">
                              Missing scopes: {result.scopes.missing.join(', ')}
                            </p>
                          )}
                        </div>
                      )}
                      
                      <div>
                        <h5 className="font-medium mb-2">API Tests:</h5>
                        <div className="space-y-2">
                          {result.tests.map((test, testIndex) => (
                            <div key={testIndex} className={`p-3 rounded border ${
                              test.status === 'error' 
                                ? 'border-red-200 bg-red-50' 
                                : 'border-green-200 bg-green-50'
                            }`}>
                              <div className="flex items-center justify-between mb-1">
                                <span className="font-medium">{test.name}</span>
                                <span className={`text-sm ${
                                  test.status === 'error' ? 'text-red-600' : 'text-green-600'
                                }`}>
                                  {test.status === 'error' ? '❌' : '✅'} {test.statusCode}
                                </span>
                              </div>
                              <p className="text-sm text-gray-600 mb-1">{test.description}</p>
                              <p className="text-xs text-gray-500">{test.endpoint}</p>
                              {test.error && (
                                <p className="text-sm text-red-600 mt-1">Error: {test.error}</p>
                              )}
                              {test.requiredScopes.length > 0 && (
                                <div className="mt-1">
                                  <span className="text-xs text-gray-500">Scopes: </span>
                                  {test.requiredScopes.map(scope => (
                                    <span key={scope} className="text-xs bg-gray-100 px-1 rounded mr-1">
                                      {scope}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* API Logs Modal */}
        {showApiLogsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    API Error Logs
                  </h3>
                  <button
                    onClick={() => setShowApiLogsModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                {apiLogs.length === 0 ? (
                  <div className="text-center py-8">
                    <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <h4 className="text-lg font-medium text-gray-900 mb-2">No API errors found</h4>
                    <p className="text-gray-600">All API validations are working correctly.</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {apiLogs.map((log, index) => (
                      <div key={index} className="border border-red-200 bg-red-50 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <h4 className="font-semibold text-red-900">{log.site || 'Unknown Site'}</h4>
                          </div>
                          <span className="text-xs text-red-600 bg-red-100 px-2 py-1 rounded">
                            {new Date(log.timestamp).toLocaleString()}
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          <div>
                            <span className="text-sm font-medium text-red-900">Error:</span>
                            <p className="text-sm text-red-800 mt-1">{log.error}</p>
                          </div>
                          
                          {log.endpoint && (
                            <div>
                              <span className="text-sm font-medium text-red-900">Endpoint:</span>
                              <p className="text-sm text-red-700 font-mono mt-1">{log.endpoint}</p>
                            </div>
                          )}
                          
                          {log.statusCode && (
                            <div>
                              <span className="text-sm font-medium text-red-900">Status Code:</span>
                              <span className="text-sm text-red-800 ml-2">{log.statusCode}</span>
                            </div>
                          )}
                          
                          {log.details && (
                            <div>
                              <span className="text-sm font-medium text-red-900">Details:</span>
                              <pre className="text-xs text-red-700 bg-red-100 p-2 rounded mt-1 overflow-x-auto">
                                {JSON.stringify(log.details, null, 2)}
                              </pre>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* Webhook Logs Modal */}
        {showWebhookLogsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70] p-4">
            <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    Webhook Activity Logs
                  </h3>
                  <button
                    onClick={() => setShowWebhookLogsModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                {webhookLogs.length === 0 ? (
                  <div className="text-center py-8">
                    <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <h4 className="text-lg font-medium text-gray-900 mb-2">No webhook activity found</h4>
                    <p className="text-gray-600">Webhook logs will appear here when recordings or transcripts are processed.</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {webhookLogs.map((log, index) => (
                      <div key={index} className={`border rounded-lg p-4 ${
                        log.status === 'error' ? 'border-red-200 bg-red-50' : 
                        log.status === 'warning' ? 'border-yellow-200 bg-yellow-50' :
                        'border-green-200 bg-green-50'
                      }`}>
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <svg className={`w-5 h-5 ${
                              log.status === 'error' ? 'text-red-600' : 
                              log.status === 'warning' ? 'text-yellow-600' :
                              'text-green-600'
                            }`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={
                                log.status === 'error' ? "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" :
                                log.status === 'warning' ? "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" :
                                "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              } />
                            </svg>
                            <h4 className={`font-semibold ${
                              log.status === 'error' ? 'text-red-900' : 
                              log.status === 'warning' ? 'text-yellow-900' :
                              'text-green-900'
                            }`}>
                              {log.webhookType === 'recordings' ? '🎥 Recording' : '📝 Transcript'} - {log.siteUrl}
                            </h4>
                          </div>
                          <span className="text-xs text-gray-500 bg-white px-2 py-1 rounded">
                            {new Date(log.timestamp).toLocaleString()}
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          <div>
                            <span className={`text-sm font-medium ${
                              log.status === 'error' ? 'text-red-900' : 
                              log.status === 'warning' ? 'text-yellow-900' :
                              'text-green-900'
                            }`}>Message:</span>
                            <p className={`text-sm mt-1 ${
                              log.status === 'error' ? 'text-red-800' : 
                              log.status === 'warning' ? 'text-yellow-800' :
                              'text-green-800'
                            }`}>{log.message}</p>
                          </div>
                          
                          {log.meetingId && (
                            <div>
                              <span className="text-sm font-medium text-gray-700">Meeting ID:</span>
                              <span className="text-sm text-gray-600 ml-2 font-mono">{log.meetingId}</span>
                            </div>
                          )}
                          
                          {log.error && (
                            <div>
                              <span className="text-sm font-medium text-red-900">Error:</span>
                              <p className="text-sm text-red-800 mt-1">{log.error}</p>
                            </div>
                          )}
                          
                          {log.processingDetails && (
                            <div>
                              <span className="text-sm font-medium text-gray-700">Details:</span>
                              <p className="text-sm text-gray-600 mt-1">{log.processingDetails}</p>
                            </div>
                          )}
                          
                          <div className="flex items-center gap-4 text-xs text-gray-500">
                            <span>DB: {log.databaseAction || 'none'}</span>
                            <span>S3: {log.s3Upload ? '✅' : '❌'}</span>
                            <span>SSE: {log.sseNotification ? '✅' : '❌'}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* Webhook Management Modal */}
        {showWebhookModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-lg w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 6 16 0z" />
                  </svg>
                  Webhook Management
                </h3>
                {console.log('🔧 [FRONTEND-WEBHOOK] Webhook modal opened')}
                
                <p className="text-sm text-gray-600 mb-6">
                  Manage Webex Meetings webhooks for recordings and transcripts. These webhooks notify the system when new recordings and transcripts are available.
                </p>
                
                <div className="space-y-4">
                  <button
                    onClick={async () => {
                      console.log('🔧 [FRONTEND-WEBHOOK] Create webhooks button clicked');
                      console.log('🔧 [FRONTEND-WEBHOOK] Current webex meetings sites:', webexMeetingsSites);
                      console.log('🔧 [FRONTEND-WEBHOOK] Webex meetings enabled:', webexMeetingsEnabled);
                      
                      setProcessingWebhooks(true);
                      setWebhookAction('create');
                      try {
                        console.log('🔧 [FRONTEND-WEBHOOK] Sending create webhook request...');
                        const requestPayload = { action: 'create' };
                        console.log('🔧 [FRONTEND-WEBHOOK] Request payload:', requestPayload);
                        
                        const response = await fetch('/api/webexmeetings/settings/webhookmgmt', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify(requestPayload)
                        });
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Response status:', response.status);
                        console.log('🔧 [FRONTEND-WEBHOOK] Response headers:', Object.fromEntries(response.headers.entries()));
                        console.log('🔧 [FRONTEND-WEBHOOK] Response ok:', response.ok);
                        
                        const data = await response.json();
                        console.log('🔧 [FRONTEND-WEBHOOK] Response data:', data);
                        
                        setWebhookResults(data.results || []);
                        
                        const successCount = data.results?.filter(r => r.status === 'created').length || 0;
                        const errorCount = data.results?.filter(r => r.status === 'error').length || 0;
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Results summary:', {
                          successCount,
                          errorCount,
                          totalResults: data.results?.length || 0,
                          results: data.results
                        });
                        
                        if (successCount > 0) {
                          console.log('🔧 [FRONTEND-WEBHOOK] Success - showing success alert');
                          alert(`✅ Successfully created webhooks for ${successCount} site(s)!${errorCount > 0 ? ` (${errorCount} failed)` : ''}`);
