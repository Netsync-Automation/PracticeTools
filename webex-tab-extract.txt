            {activeTab === 'webex' && !isNonAdminPracticeUser && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-semibold text-gray-900">WebEx Bot Management</h2>
                  <div className="flex gap-3">
                    <button
                      onClick={() => {
                        setIsEditMode(false);
                        setNewBot({
                          friendlyName: '',
                          name: '',
                          practices: [],
                          accessToken: ''
                        });
                        setCurrentStep(1);
                        setCompletedSteps([]);
                        setSelectedSpace('');
                        setBotRooms([]);
                        setShowAddBot(true);
                      }}
                      className="btn-primary flex items-center gap-2"
                    >
                      <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      Add WebEx Bot
                    </button>
                  </div>
                </div>
                
                {/* WebEx SSM Configuration Export */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-blue-900">WebEx Bot SSM Export</h3>
                      <p className="text-sm text-blue-700 mt-1">Export WebEx bot SSM parameters for App Runner YAML files</p>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={async () => {
                          setLoadingSSM(true);
                          try {
                            const response = await fetch('/api/admin/ssm-secrets?env=dev');
                            const data = await response.json();
                            if (data.success) {
                              setSSMSecrets(data.yamlFormat);
                              setSSMEnvironment('Development');
                              setShowSSMModal(true);
                            } else {
                              alert('Failed to fetch dev WebEx SSM parameters');
                            }
                          } catch (error) {
                            alert('Error fetching dev WebEx SSM parameters');
                          } finally {
                            setLoadingSSM(false);
                          }
                        }}
                        disabled={loadingSSM}
                        className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 disabled:opacity-50"
                      >
                        {loadingSSM ? 'Loading...' : 'Dev'}
                      </button>
                      <button
                        onClick={async () => {
                          setLoadingSSM(true);
                          try {
                            const response = await fetch('/api/admin/ssm-secrets?env=prod');
                            const data = await response.json();
                            if (data.success) {
                              setSSMSecrets(data.yamlFormat);
                              setSSMEnvironment('Production');
                              setShowSSMModal(true);
                            } else {
                              alert('Failed to fetch prod WebEx SSM parameters');
                            }
                          } catch (error) {
                            alert('Error fetching prod WebEx SSM parameters');
                          } finally {
                            setLoadingSSM(false);
                          }
                        }}
                        disabled={loadingSSM}
                        className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700 disabled:opacity-50"
                      >
                        {loadingSSM ? 'Loading...' : 'Prod'}
                      </button>
                    </div>
                  </div>
                </div>
                
                <p className="text-gray-600 text-sm">
                  Configure WebEx bots for different practices. Each practice can have one bot, but multiple practices can share the same bot.
                </p>
                
                {webexBots.length === 0 ? (
                  <div className="text-center py-8 bg-gray-50 rounded-lg">
                    <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                    <h3 className="mt-2 text-sm font-medium text-gray-900">No WebEx bots configured</h3>
                    <p className="mt-1 text-sm text-gray-500">Get started by adding your first WebEx bot.</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {webexBots.map((bot) => (
                      <div key={bot.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <h3 className="text-lg font-medium text-gray-900">{bot.friendlyName || bot.name}</h3>
                            <p className="text-sm text-gray-600 mt-1">{bot.name}</p>
                            <p className="text-sm text-gray-500 mt-1">SSM Prefix: WEBEX_{bot.ssmPrefix}</p>
                            <div className="mt-2">
                              <span className="text-sm font-medium text-gray-700">Practices: </span>
                              <div className="flex flex-wrap gap-1 mt-1">
                                {bot.practices.map(practice => (
                                  <span key={practice} className="inline-flex px-2 py-1 text-xs font-medium rounded bg-blue-100 text-blue-800">
                                    {practice}
                                  </span>
                                ))}
                              </div>
                            </div>
                            {bot.roomName && (
                              <p className="text-sm text-gray-600 mt-2">
                                <span className="font-medium">Practice Issues:</span> {bot.roomName}
                              </p>
                            )}
                            {bot.resourceRoomName && (
                              <p className="text-sm text-gray-600 mt-1">
                                <span className="font-medium">Resource Assignment:</span> {bot.resourceRoomName}
                              </p>
                            )}
                          </div>
                          <div className="flex gap-2 ml-4">
                            <button
                              onClick={async () => {
                                setSyncingBots(prev => ({...prev, [bot.id]: true}));
                                try {
                                  const response = await fetch('/api/webex/sync-bot', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ botId: bot.id })
                                  });
                                  const data = await response.json();
                                  if (data.success) {
                                    alert(`Users synchronized successfully from ${bot.friendlyName || bot.name}!`);
                                  } else {
                                    alert(data.error || 'Sync failed');
                                  }
                                } catch (error) {
                                  alert('Sync failed');
                                } finally {
                                  setSyncingBots(prev => ({...prev, [bot.id]: false}));
                                }
                              }}
                              disabled={syncingBots[bot.id]}
                              className="text-green-600 hover:text-green-800 hover:bg-green-50 p-2 rounded disabled:opacity-50"
                              title="Sync WebEx Users"
                            >
                              {syncingBots[bot.id] ? (
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-600"></div>
                              ) : (
                                <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                              )}
                            </button>
                            <button
                              onClick={async () => {

                                setIsEditMode(true);
                                setNewBot({
                                  id: bot.id,
                                  friendlyName: bot.friendlyName || '',
                                  name: bot.name,
                                  practices: bot.practices || [],
                                  accessToken: '',
                                  roomId: bot.roomId || '',
                                  roomName: bot.roomName || '',
                                  resourceRoomId: bot.resourceRoomId || '',
                                  resourceRoomName: bot.resourceRoomName || ''
                                });
                                setCurrentStep(1);
                                setCompletedSteps([]);
                                setSelectedSpace(bot.roomId || '');
                                setSelectedResourceSpace(bot.resourceRoomId || '');

                                setShowAddBot(true);
                              }}
                              className="text-blue-600 hover:text-blue-800 hover:bg-blue-50 p-2 rounded"
                              title="Edit Bot"
                            >
                              <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                            </button>
                            <button
                              onClick={() => handleDeleteBot(bot.id)}
                              className="text-red-600 hover:text-red-800 hover:bg-red-50 p-2 rounded"
                              title="Delete Bot"
                            >
                              <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {false && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">SSO Settings</h2>
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="ssoEnabled"
                    checked={settings.ssoEnabled}
                    onChange={(e) => setSettings({...settings, ssoEnabled: e.target.checked})}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <label htmlFor="ssoEnabled" className="ml-2 block text-sm text-gray-900">
                    Enable Single Sign-On
                  </label>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">SSO Provider</label>
                  <select
                    value={settings.ssoProvider}
                    onChange={(e) => setSettings({...settings, ssoProvider: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="duo">Duo Security</option>
                    <option value="azure">Azure AD</option>
                    <option value="okta">Okta</option>
                    <option value="google">Google Workspace</option>
                  </select>
                </div>
                
                {settings.ssoProvider === 'duo' && (
                  <div className="space-y-6 p-6 bg-gray-50 rounded-lg border">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Duo Security SAML Configuration</h3>
                      
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">SAML Issuer (SP Entity ID)</label>
                        <input
                          type="text"
                          value={settings.duoIssuer || 'urn:amazon:webservices:issuestracker'}
                          onChange={(e) => setSettings({...settings, duoIssuer: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="urn:amazon:webservices:issuestracker"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Duo API Hostname</label>
                        <input
                          type="text"
                          value={settings.duoApiHostname || ''}
                          onChange={(e) => setSettings({...settings, duoApiHostname: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="api-xxxxxxxx.duosecurity.com"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">SAML Entry Point (IdP SSO URL)</label>
                      <input
                        type="url"
                        value={settings.duoEntryPoint || ''}
                        onChange={(e) => setSettings({...settings, duoEntryPoint: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="https://api-xxxxxxxx.duosecurity.com/saml2/idp/sso"
                      />
                    </div>
                      
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">SAML Logout URL (IdP SLO URL)</label>
                      <input
                        type="url"
                        value={settings.duoLogoutUrl || ''}
                        onChange={(e) => setSettings({...settings, duoLogoutUrl: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="https://api-xxxxxxxx.duosecurity.com/saml2/idp/slo"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">IdP Certificate (X.509)</label>
                      <textarea
                        value={settings.duoCertificate || ''}
                        onChange={(e) => setSettings({...settings, duoCertificate: e.target.value})}
                        rows="8"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs"
                        placeholder="-----BEGIN CERTIFICATE-----&#10;MIICXjCCAcegAwIBAgIBADANBgkqhkiG9w0BAQ0FADBLMQswCQYDVQQGEwJ1czEL&#10;...&#10;-----END CERTIFICATE-----"
                      />
                      <p className="text-sm text-gray-500 mt-1">Download from Duo Admin Panel → Applications → Your App → Certificate</p>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">SP Private Key (Optional - for request signing)</label>
                      <textarea
                        value={settings.duoPrivateKey || ''}
                        onChange={(e) => setSettings({...settings, duoPrivateKey: e.target.value})}
                        rows="6"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs"
                        placeholder="-----BEGIN PRIVATE KEY-----&#10;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC...&#10;-----END PRIVATE KEY-----"
                      />
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="signRequests"
                          checked={settings.duoSignRequests || false}
                          onChange={(e) => setSettings({...settings, duoSignRequests: e.target.checked})}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <label htmlFor="signRequests" className="ml-2 block text-sm text-gray-900">
                          Sign SAML Requests
                        </label>
                      </div>
                      
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="forceAuthn"
                          checked={settings.duoForceAuthn || false}
                          onChange={(e) => setSettings({...settings, duoForceAuthn: e.target.checked})}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <label htmlFor="forceAuthn" className="ml-2 block text-sm text-gray-900">
                          Force Re-authentication
                        </label>
                      </div>
                      
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="autoProvision"
                          checked={settings.ssoAutoProvision || true}
                          onChange={(e) => setSettings({...settings, ssoAutoProvision: e.target.checked})}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <label htmlFor="autoProvision" className="ml-2 block text-sm text-gray-900">
                          Auto-provision Users
                        </label>
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Admin Email Domains</label>
                      <input
                        type="text"
                        value={settings.ssoAdminDomains || ''}
                        onChange={(e) => setSettings({...settings, ssoAdminDomains: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="yourdomain.com,anotherdomain.com"
                      />
                      <p className="text-sm text-gray-500 mt-1">Users from these domains will be granted admin access</p>
                    </div>
                    
                    <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                      <h4 className="text-sm font-medium text-blue-900 mb-3">Duo Configuration</h4>
                      
                      <div className="space-y-3">
                        <div>
                          <p className="text-sm text-blue-700 mb-2">1. Download SAML metadata file for Duo:</p>
                          <button
                            onClick={() => {
                              const url = typeof window !== 'undefined' ? window.location.origin : 'https://your-domain.com';
                              window.open(`${url}/api/auth/saml/metadata`, '_blank');
                            }}
                            className="px-3 py-2 text-sm bg-green-600 text-white rounded hover:bg-green-700"
                          >
                            Download Metadata XML
                          </button>
                        </div>
                        
                        <div>
                          <p className="text-sm text-blue-700 mb-2">2. Or use these URLs manually in Duo:</p>
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-blue-600 w-16">ACS URL:</span>
                              <code className="flex-1 px-2 py-1 bg-white border rounded text-xs font-mono">
                                {typeof window !== 'undefined' ? window.location.origin : 'https://your-domain.com'}/api/auth/saml/callback
                              </code>
                              <button
                                onClick={() => {
                                  const url = typeof window !== 'undefined' ? window.location.origin : 'https://your-domain.com';
                                  navigator.clipboard.writeText(`${url}/api/auth/saml/callback`);
                                  alert('ACS URL copied!');
                                }}
                                className="px-2 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700"
                              >
                                Copy
                              </button>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="text-xs text-blue-600 w-16">Entity ID:</span>
                              <code className="flex-1 px-2 py-1 bg-white border rounded text-xs font-mono">
                                {settings.duoIssuer || 'urn:amazon:webservices:issuestracker'}
                              </code>
                              <button
                                onClick={() => {
                                  navigator.clipboard.writeText(settings.duoIssuer || 'urn:amazon:webservices:issuestracker');
                                  alert('Entity ID copied!');
                                }}
                                className="px-2 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700"
                              >
                                Copy
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      <button
                        onClick={async () => {
                          try {
                            const response = await fetch('/api/auth/duo/test', { method: 'POST' });
                            const data = await response.json();
                            
                            if (data.success) {
                              const passedTests = data.results.tests.filter(t => t.status === 'pass').length;
                              const totalTests = data.results.tests.length;
                              const details = data.results.tests.map(t => `${t.name}: ${t.message}`).join('\n');
                              
                              alert(`Duo Test Results (${passedTests}/${totalTests} passed):\n\n${details}`);
                            } else {
                              alert(`Test failed: ${data.error}`);
                            }
                          } catch (error) {
                            alert('Test failed: Unable to connect to test endpoint');
                          }
                        }}
                        className="px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700"
                      >
                        Test Configuration
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}
            
