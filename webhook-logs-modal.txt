        {showWebhookLogsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70] p-4">
            <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold flex items-center gap-2">
                    <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    Webhook Activity Logs
                  </h3>
                  <button
                    onClick={() => setShowWebhookLogsModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                {webhookLogs.length === 0 ? (
                  <div className="text-center py-8">
                    <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <h4 className="text-lg font-medium text-gray-900 mb-2">No webhook activity found</h4>
                    <p className="text-gray-600">Webhook logs will appear here when recordings or transcripts are processed.</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {webhookLogs.map((log, index) => (
                      <div key={index} className={`border rounded-lg p-4 ${
                        log.status === 'error' ? 'border-red-200 bg-red-50' : 
                        log.status === 'warning' ? 'border-yellow-200 bg-yellow-50' :
                        'border-green-200 bg-green-50'
                      }`}>
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <svg className={`w-5 h-5 ${
                              log.status === 'error' ? 'text-red-600' : 
                              log.status === 'warning' ? 'text-yellow-600' :
                              'text-green-600'
                            }`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={
                                log.status === 'error' ? "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" :
                                log.status === 'warning' ? "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" :
                                "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              } />
                            </svg>
                            <h4 className={`font-semibold ${
                              log.status === 'error' ? 'text-red-900' : 
                              log.status === 'warning' ? 'text-yellow-900' :
                              'text-green-900'
                            }`}>
                              {log.webhookType === 'recordings' ? '🎥 Recording' : '📝 Transcript'} - {log.siteUrl}
                            </h4>
                          </div>
                          <span className="text-xs text-gray-500 bg-white px-2 py-1 rounded">
                            {new Date(log.timestamp).toLocaleString()}
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          <div>
                            <span className={`text-sm font-medium ${
                              log.status === 'error' ? 'text-red-900' : 
                              log.status === 'warning' ? 'text-yellow-900' :
                              'text-green-900'
                            }`}>Message:</span>
                            <p className={`text-sm mt-1 ${
                              log.status === 'error' ? 'text-red-800' : 
                              log.status === 'warning' ? 'text-yellow-800' :
                              'text-green-800'
                            }`}>{log.message}</p>
                          </div>
                          
                          {log.meetingId && (
                            <div>
                              <span className="text-sm font-medium text-gray-700">Meeting ID:</span>
                              <span className="text-sm text-gray-600 ml-2 font-mono">{log.meetingId}</span>
                            </div>
                          )}
                          
                          {log.error && (
                            <div>
                              <span className="text-sm font-medium text-red-900">Error:</span>
                              <p className="text-sm text-red-800 mt-1">{log.error}</p>
                            </div>
                          )}
                          
                          {log.processingDetails && (
                            <div>
                              <span className="text-sm font-medium text-gray-700">Details:</span>
                              <p className="text-sm text-gray-600 mt-1">{log.processingDetails}</p>
                            </div>
                          )}
                          
                          <div className="flex items-center gap-4 text-xs text-gray-500">
                            <span>DB: {log.databaseAction || 'none'}</span>
                            <span>S3: {log.s3Upload ? '✅' : '❌'}</span>
                            <span>SSE: {log.sseNotification ? '✅' : '❌'}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
        
        {/* Webhook Management Modal */}