        {showWebhookModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-lg w-full">
              <div className="p-6">
                <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                  <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 6 16 0z" />
                  </svg>
                  Webhook Management
                </h3>
                {console.log('🔧 [FRONTEND-WEBHOOK] Webhook modal opened')}
                
                <p className="text-sm text-gray-600 mb-6">
                  Manage Webex Meetings webhooks for recordings and transcripts. These webhooks notify the system when new recordings and transcripts are available.
                </p>
                
                <div className="space-y-4">
                  <button
                    onClick={async () => {
                      console.log('🔧 [FRONTEND-WEBHOOK] Create webhooks button clicked');
                      console.log('🔧 [FRONTEND-WEBHOOK] Current webex meetings sites:', webexMeetingsSites);
                      console.log('🔧 [FRONTEND-WEBHOOK] Webex meetings enabled:', webexMeetingsEnabled);
                      
                      setProcessingWebhooks(true);
                      setWebhookAction('create');
                      try {
                        console.log('🔧 [FRONTEND-WEBHOOK] Sending create webhook request...');
                        const requestPayload = { action: 'create' };
                        console.log('🔧 [FRONTEND-WEBHOOK] Request payload:', requestPayload);
                        
                        const response = await fetch('/api/webexmeetings/settings/webhookmgmt', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify(requestPayload)
                        });
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Response status:', response.status);
                        console.log('🔧 [FRONTEND-WEBHOOK] Response headers:', Object.fromEntries(response.headers.entries()));
                        console.log('🔧 [FRONTEND-WEBHOOK] Response ok:', response.ok);
                        
                        const data = await response.json();
                        console.log('🔧 [FRONTEND-WEBHOOK] Response data:', data);
                        
                        setWebhookResults(data.results || []);
                        
                        const successCount = data.results?.filter(r => r.status === 'created').length || 0;
                        const errorCount = data.results?.filter(r => r.status === 'error').length || 0;
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Results summary:', {
                          successCount,
                          errorCount,
                          totalResults: data.results?.length || 0,
                          results: data.results
                        });
                        
                        if (successCount > 0) {
                          console.log('🔧 [FRONTEND-WEBHOOK] Success - showing success alert');
                          alert(`✅ Successfully created webhooks for ${successCount} site(s)!${errorCount > 0 ? ` (${errorCount} failed)` : ''}`);
                        } else {
                          console.log('🔧 [FRONTEND-WEBHOOK] No successes - showing failure alert');
                          const errorDetails = data.results?.filter(r => r.status === 'error').map(r => `${r.site}: ${r.error}`).join('\n') || 'Unknown error';
                          console.log('🔧 [FRONTEND-WEBHOOK] Error details:', errorDetails);
                          alert(`❌ Failed to create webhooks:\n\n${errorDetails}`);
                        }
                      } catch (error) {
                        console.error('🔧 [FRONTEND-WEBHOOK] Error creating webhooks:', {
                          message: error.message,
                          stack: error.stack,
                          name: error.name
                        });
                        alert('❌ Error creating webhooks');
                      } finally {
                        console.log('🔧 [FRONTEND-WEBHOOK] Finished webhook creation process');
                        setProcessingWebhooks(false);
                      }
                    }}
                    disabled={processingWebhooks}
                    className="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"
                  >
                    {processingWebhooks && webhookAction === 'create' ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Creating Webhooks...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Create Webhooks
                      </>
                    )}
                  </button>
                  
                  <button
                    onClick={async () => {
                      console.log('🔧 [FRONTEND-WEBHOOK] Validate webhooks button clicked');
                      setProcessingWebhooks(true);
                      setWebhookAction('validate');
                      try {
                        console.log('🔧 [FRONTEND-WEBHOOK] Sending validate webhook request...');
                        const response = await fetch('/api/webexmeetings/settings/webhookmgmt', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ action: 'validate' })
                        });
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Validate response status:', response.status);
                        const data = await response.json();
                        console.log('🔧 [FRONTEND-WEBHOOK] Validate response data:', data);
                        
                        setWebhookResults(data.results || []);
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Validation response data:', data);
                        setValidationResults(data.results || []);
                        setShowValidationModal(true);
                      } catch (error) {
                        console.error('🔧 [FRONTEND-WEBHOOK] Error validating webhooks:', error);
                        alert('❌ Error validating webhooks');
                      } finally {
                        setProcessingWebhooks(false);
                      }
                    }}
                    disabled={processingWebhooks}
                    className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"
                  >
                    {processingWebhooks && webhookAction === 'validate' ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Validating Webhooks...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Validate Webhooks
                      </>
                    )}
                  </button>
                  
                  <button
                    onClick={async () => {
                      console.log('🔧 [FRONTEND-WEBHOOK] Delete webhooks button clicked');
                      if (!confirm('⚠️ Are you sure you want to delete all webhooks? This will stop automatic recording and transcript processing.')) {
                        console.log('🔧 [FRONTEND-WEBHOOK] User cancelled delete operation');
                        return;
                      }
                      
                      setProcessingWebhooks(true);
                      setWebhookAction('delete');
                      try {
                        console.log('🔧 [FRONTEND-WEBHOOK] Sending delete webhook request...');
                        const response = await fetch('/api/webexmeetings/settings/webhookmgmt', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ action: 'delete' })
                        });
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Delete response status:', response.status);
                        const data = await response.json();
                        console.log('🔧 [FRONTEND-WEBHOOK] Delete response data:', data);
                        
                        setWebhookResults(data.results || []);
                        
                        const deletedCount = data.results?.filter(r => r.status === 'deleted').length || 0;
                        const errorCount = data.results?.filter(r => r.status === 'error').length || 0;
                        
                        console.log('🔧 [FRONTEND-WEBHOOK] Delete summary:', {
                          deletedCount,
                          errorCount
                        });
                        
                        if (deletedCount > 0) {
                          alert(`🗑️ Successfully deleted webhooks for ${deletedCount} site(s)!${errorCount > 0 ? ` (${errorCount} failed)` : ''}`);
                        } else {
                          alert('❌ Failed to delete webhooks.');
                        }
                      } catch (error) {
                        console.error('🔧 [FRONTEND-WEBHOOK] Error deleting webhooks:', error);
                        alert('❌ Error deleting webhooks');
                      } finally {
                        setProcessingWebhooks(false);
                      }
                    }}
                    disabled={processingWebhooks}
                    className="w-full px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center justify-center gap-2 transition-colors"
                  >
                    {processingWebhooks && webhookAction === 'delete' ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        Deleting Webhooks...
                      </>
                    ) : (
                      <>
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Delete Webhooks
                      </>
                    )}
                  </button>
                </div>
                
                <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Webhook URLs:</h4>
                  <div className="space-y-1 text-xs text-gray-600">
                    <div>Recordings: <code className="bg-white px-1 rounded">{typeof window !== 'undefined' ? window.location.origin : 'https://your-domain.com'}/api/webhooks/webexmeetings/recordings</code></div>
                    <div>Transcripts: <code className="bg-white px-1 rounded">{typeof window !== 'undefined' ? window.location.origin : 'https://your-domain.com'}/api/webhooks/webexmeetings/transcripts</code></div>
                  </div>
                </div>
                
                <div className="flex justify-end gap-3 mt-6">
                  <button
                    onClick={async () => {
                      setLoadingWebhookLogs(true);
                      try {
                        const response = await fetch('/api/webexmeetings/settings/webhooklogs');
                        const data = await response.json();
                        setWebhookLogs(data.logs || []);
                        setShowWebhookLogsModal(true);
                      } catch (error) {
                        alert('❌ Error loading webhook logs');
                      } finally {
                        setLoadingWebhookLogs(false);
                      }
                    }}
                    disabled={loadingWebhookLogs}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                  >
                    {loadingWebhookLogs ? 'Loading...' : 'View Logs'}
                  </button>
                  <button
                    onClick={() => {
                      console.log('🔧 [FRONTEND-WEBHOOK] Closing webhook modal');
                      setShowWebhookModal(false);
                      setWebhookResults([]);
                      setWebhookAction('');
                    }}
                    className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        
        {/* Webhook Validation Results Modal */}
        {showValidationModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[80vh] overflow-hidden">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                    <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />